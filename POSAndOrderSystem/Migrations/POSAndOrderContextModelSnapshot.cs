// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using POSAndOrderSystem.DbContexts;

#nullable disable

namespace POSAndOrderSystem.Migrations
{
    [DbContext(typeof(POSAndOrderContext))]
    partial class POSAndOrderContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("POSAndOrderSystem.Entities.LookupItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("LookupTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LookupTypeId");

                    b.ToTable("LookupItems", null, t =>
                        {
                            t.HasCheckConstraint("CH_Name_Length", "Len(Name) >= 3");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 1,
                            Name = "Cashier"
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 1,
                            Name = "Customer"
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 1,
                            Name = "Delivery"
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 2,
                            Name = "Pending"
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 2,
                            Name = "In Progress"
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 2,
                            Name = "Completed"
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 2,
                            Name = "Canceld"
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 3,
                            Name = "Cash"
                        },
                        new
                        {
                            ID = 10,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 3,
                            Name = "Credit Card"
                        },
                        new
                        {
                            ID = 11,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 3,
                            Name = "Online Wallet"
                        },
                        new
                        {
                            ID = 12,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 4,
                            Name = "Paid"
                        },
                        new
                        {
                            ID = 13,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 4,
                            Name = "Unpaid"
                        },
                        new
                        {
                            ID = 14,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 5,
                            Name = "Pickup"
                        },
                        new
                        {
                            ID = 15,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LookupTypeId = 5,
                            Name = "Delivery"
                        });
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.LookupType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LookupTypes", null, t =>
                        {
                            t.HasCheckConstraint("CH_Name_Length", "Len(Name) >= 3")
                                .HasName("CH_Name_Length1");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "User Role"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Order Status"
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Payment Method"
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Payment Status"
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pickup Type"
                        });
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.MenuItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("MenuItemName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("MenuTypeID")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.HasIndex("MenuTypeID");

                    b.ToTable("MenuItems", null, t =>
                        {
                            t.HasCheckConstraint("CH-MenuItemName_Length", "LEN( MenuItemName ) >= 3");

                            t.HasCheckConstraint("CH_Price_Positive", "[Price] >= 0");
                        });

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Chicken Shawarma",
                            MenuTypeID = 1,
                            Price = 3f
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Beef Shawarma Plate",
                            MenuTypeID = 1,
                            Price = 3f
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Spicy Shawarma Wrap",
                            MenuTypeID = 1,
                            Price = 3f
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Half Roasted Chicken",
                            MenuTypeID = 2,
                            Price = 3f
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "BBQ Glazed Roasted Chicken",
                            MenuTypeID = 2,
                            Price = 3f
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Lemon Pepper Roasted Chicken",
                            MenuTypeID = 2,
                            Price = 3f
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Charcoal-Grilled Whole Chicken",
                            MenuTypeID = 3,
                            Price = 3f
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Charcoal-Grilled Chicken Skewers",
                            MenuTypeID = 3,
                            Price = 3f
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Spicy Peri-Peri Charcoal Chicken",
                            MenuTypeID = 3,
                            Price = 3f
                        },
                        new
                        {
                            ID = 10,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Chicken Thighs with Garlic Butter",
                            MenuTypeID = 4,
                            Price = 3f
                        },
                        new
                        {
                            ID = 11,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Boneless Chicken Breast Fillets",
                            MenuTypeID = 4,
                            Price = 3f
                        },
                        new
                        {
                            ID = 12,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Drumsticks in Spicy Marinade",
                            MenuTypeID = 4,
                            Price = 3f
                        },
                        new
                        {
                            ID = 13,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Herb Roasted Chicken with Basmati Rice",
                            MenuTypeID = 5,
                            Price = 3f
                        },
                        new
                        {
                            ID = 14,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Roasted Chicken with Pilaf and Saffron",
                            MenuTypeID = 5,
                            Price = 3f
                        },
                        new
                        {
                            ID = 15,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "BBQ Roasted Chicken over Brown Rice",
                            MenuTypeID = 5,
                            Price = 3f
                        },
                        new
                        {
                            ID = 16,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Charcoal Chicken with Turmeric Rice",
                            MenuTypeID = 6,
                            Price = 3f
                        },
                        new
                        {
                            ID = 17,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Grilled Chicken with Vegetable Rice",
                            MenuTypeID = 6,
                            Price = 3f
                        },
                        new
                        {
                            ID = 18,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Smoky Charcoal Chicken with Fried Rice",
                            MenuTypeID = 6,
                            Price = 3f
                        },
                        new
                        {
                            ID = 19,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "French Fries with Dipping Sauces",
                            MenuTypeID = 7,
                            Price = 3f
                        },
                        new
                        {
                            ID = 20,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Mozzarella Sticks with Marinara",
                            MenuTypeID = 7,
                            Price = 3f
                        },
                        new
                        {
                            ID = 21,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Chicken Nuggets with Honey Mustard",
                            MenuTypeID = 7,
                            Price = 3f
                        },
                        new
                        {
                            ID = 22,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Hummus with Pita Bread",
                            MenuTypeID = 8,
                            Price = 3f
                        },
                        new
                        {
                            ID = 23,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Stuffed Grape Leaves",
                            MenuTypeID = 8,
                            Price = 3f
                        },
                        new
                        {
                            ID = 24,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Garlic Bread with Cheese",
                            MenuTypeID = 8,
                            Price = 3f
                        },
                        new
                        {
                            ID = 25,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Fresh Lemon Mint Cooler",
                            MenuTypeID = 9,
                            Price = 3f
                        },
                        new
                        {
                            ID = 26,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Iced Hibiscus Tea",
                            MenuTypeID = 9,
                            Price = 3f
                        },
                        new
                        {
                            ID = 27,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuItemName = "Sparkling Berry Lemonade",
                            MenuTypeID = 9,
                            Price = 3f
                        });
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.MenuType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MenuTypeName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("ID")
                        .IsUnique();

                    b.ToTable("MenuTypes", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Shawarma"
                        },
                        new
                        {
                            ID = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Roasted Chicken"
                        },
                        new
                        {
                            ID = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Chicken On Charcoal"
                        },
                        new
                        {
                            ID = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Prorated Chicken"
                        },
                        new
                        {
                            ID = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Roasted Chicken With Rice"
                        },
                        new
                        {
                            ID = 6,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Chicken On Charcoal With Rice"
                        },
                        new
                        {
                            ID = 7,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Snacks"
                        },
                        new
                        {
                            ID = 8,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Appetizers"
                        },
                        new
                        {
                            ID = 9,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MenuTypeName = "Drinks"
                        });
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatusID")
                        .HasColumnType("int");

                    b.Property<int>("PickUpTypeID")
                        .HasColumnType("int");

                    b.Property<float>("TotalAmount")
                        .HasColumnType("real");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("OrderStatusID");

                    b.HasIndex("PaymentMethodID");

                    b.HasIndex("PaymentStatusID");

                    b.HasIndex("PickUpTypeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.OrderItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuItemID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<string>("OrderItemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderItemNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("OrderItemPrice")
                        .HasColumnType("real");

                    b.Property<float>("Quantity")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "The Admin",
                            Password = "AAAzzz111!",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.LookupItem", b =>
                {
                    b.HasOne("POSAndOrderSystem.Entities.LookupType", null)
                        .WithMany()
                        .HasForeignKey("LookupTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.MenuItem", b =>
                {
                    b.HasOne("POSAndOrderSystem.Entities.MenuType", null)
                        .WithMany()
                        .HasForeignKey("MenuTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.Order", b =>
                {
                    b.HasOne("POSAndOrderSystem.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("OrderStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("POSAndOrderSystem.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("PaymentMethodID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("POSAndOrderSystem.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("PaymentStatusID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("POSAndOrderSystem.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("PickUpTypeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.OrderItem", b =>
                {
                    b.HasOne("POSAndOrderSystem.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.User", b =>
                {
                    b.HasOne("POSAndOrderSystem.Entities.LookupItem", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("POSAndOrderSystem.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
